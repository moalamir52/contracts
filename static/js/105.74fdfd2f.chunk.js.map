{"version":3,"file":"static/js/105.74fdfd2f.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/helpers/esm/typeof.js","../node_modules/@babel/runtime/helpers/esm/toPropertyKey.js","../node_modules/@babel/runtime/helpers/esm/toPrimitive.js","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js","workers/contractProcessor.js"],"sourcesContent":["function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\nexport { _typeof as default };","import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nfunction toPropertyKey(t) {\n  var i = toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nexport { toPropertyKey as default };","import _typeof from \"./typeof.js\";\nfunction toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nexport { toPrimitive as default };","import toPropertyKey from \"./toPropertyKey.js\";\nfunction _defineProperty(e, r, t) {\n  return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nexport { _defineProperty as default };","import defineProperty from \"./defineProperty.js\";\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread2(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nexport { _objectSpread2 as default };","/* eslint-env worker */\n/* globals XLSX */\n\nimportScripts('https://cdn.sheetjs.com/xlsx-latest/package/dist/xlsx.full.min.js');\n\nlet allContractsData = []; // Store processed data\nlet multiCarData = []; // Store processed multi-car data\n\nconst normalize = str => (str || '').toString().replace(/\\s+/g, '').toLowerCase();\n\nonmessage = function(e) {\n    console.log('Worker: Message received from main script');\n    const { type, payload } = e.data;\n\n    if (type === 'PROCESS_FILE') {\n        const fileData = payload;\n        try {\n            const dataArr = new Uint8Array(fileData);\n            const workbook = XLSX.read(dataArr, { type: 'array' });\n            const sheetName = workbook.SheetNames[0];\n            const worksheet = XLSX.Sheets[sheetName];\n            const jsonData = XLSX.utils.sheet_to_json(worksheet, { cellDates: true });\n\n            const totalRows = jsonData.length;\n            const contractNumbers = new Set(jsonData.map(row => row['Contract No.']).filter(Boolean));\n            const uniqueContractsCount = contractNumbers.size;\n\n            const contractGroups = {};\n            const contractInfo = {};\n            const periodDetailsMap = {};\n            const normalizePlate = (str) => (str || '').toString().replace(/\\s+/g, '').toUpperCase();\n            \n            jsonData.forEach(row => {\n              const contractNo = row['Contract No.'];\n              const plateNumberRaw = row['Plate Number'];\n              const plateNumber = normalizePlate(plateNumberRaw);\n              const revenueDate = row['Revenue Date'];\n              const pickupOdometer = row['Pickup Odometer'] || '';\n              if (!contractNo || !plateNumber || !revenueDate) return;\n              if (!contractGroups[contractNo]) contractGroups[contractNo] = {};\n              if (!contractGroups[contractNo][plateNumber]) contractGroups[contractNo][plateNumber] = [];\n              contractGroups[contractNo][plateNumber].push(revenueDate);\n              if (!contractInfo[contractNo]) {\n                contractInfo[contractNo] = {\n                  'Pick-up Date': row['Pick-up Date'] || '',\n                  'Drop-off Date': row['Drop-off Date'] || '',\n                  'Plate Number': plateNumberRaw || '',\n                  'Car Model': row['Car Model'] || '',\n                  'Car Category': row['Car Category'] || '',\n                  'Manufacture Year': row['Manufacture Year'] || '',\n                  'Customer Name': row['Customer Name'] || '',\n                  'Customer Phone': row['Customer Phone'] || ''\n                };\n              }\n              const getDateStr = (d) => {\n                if (d instanceof Date && !isNaN(d)) {\n                  const day = String(d.getDate()).padStart(2, '0');\n                  const month = String(d.getMonth() + 1).padStart(2, '0');\n                  const year = d.getFullYear();\n                  return `${day}/${month}/${year}`;\n                }\n                if (typeof d === 'number') {\n                  const utc_days = Math.floor(d - 25569);\n                  const utc_value = utc_days * 86400;\n                  const date_info = new Date(utc_value * 1000);\n                  const ms = Math.round((d - Math.floor(d)) * 86400 * 1000);\n                  date_info.setTime(date_info.getTime() + ms);\n                  const day = String(date_info.getDate()).padStart(2, '0');\n                  const month = String(date_info.getMonth() + 1).padStart(2, '0');\n                  const year = date_info.getFullYear();\n                  return `${day}/${month}/${year}`;\n                }\n                if (typeof d === 'string' && /^\\d{4}-\\d{2}-\\d{2}/.test(d)) {\n                  const parsed = new Date(d);\n                  if (!isNaN(parsed)) {\n                    const day = String(parsed.getDate()).padStart(2, '0');\n                    const month = String(parsed.getMonth() + 1).padStart(2, '0');\n                    const year = parsed.getFullYear();\n                    return `${day}/${month}/${year}`;\n                  }\n                }\n                return d;\n              };\n              const dateKey = getDateStr(revenueDate);\n              if (!periodDetailsMap[plateNumber]) periodDetailsMap[plateNumber] = {};\n              periodDetailsMap[plateNumber][dateKey] = {\n                model: row['Car Model'] || '',\n                category: row['Car Category'] || '',\n                year: row['Manufacture Year'] || '',\n                pickupOdometer\n              };\n            });\n\n            const allContractsResultRows = [];\n            const multiCarResultRows = [];\n\n            Object.entries(contractGroups).forEach(([contractNo, carsObj]) => {\n              let allDates = [];\n              const excelDateToJS = (serial) => {\n                const utc_days = Math.floor(serial - 25569);\n                const utc_value = utc_days * 86400;\n                const date_info = new Date(utc_value * 1000);\n                const ms = Math.round((serial - Math.floor(serial)) * 86400 * 1000);\n                date_info.setTime(date_info.getTime() + ms);\n                return date_info;\n              };\n              const formatDate = d => {\n                if (d instanceof Date && !isNaN(d)) {\n                  const day = String(d.getDate()).padStart(2, '0');\n                  const month = String(d.getMonth() + 1).padStart(2, '0');\n                  const year = d.getFullYear();\n                  return `${day}/${month}/${year}`;\n                }\n                if (typeof d === 'string' && /^\\d{4}-\\d{2}-\\d{2}/.test(d)) {\n                  const [y, m, rest] = d.split('-');\n                  const [dd] = rest.split('T')[0].split(' ');\n                  return `${dd}/${m}/${y}`;\n                }\n                return d;\n              };\n              Object.entries(carsObj).forEach(([plate, arr]) => {\n                arr.forEach(d => {\n                  let dateObj = d;\n                  if (typeof d === 'number') dateObj = excelDateToJS(d);\n                  else if (typeof d === 'string') {\n                    const parsed = new Date(d);\n                    if (!isNaN(parsed)) dateObj = parsed;\n                  }\n                  allDates.push({ plate, date: dateObj });\n                });\n              });\n              allDates.sort((a, b) => new Date(a.date) - new Date(b.date));\n              let periods = [];\n              let prevPlate = null, periodStart = null, periodEnd = null, periodStartRevenueDate = null;\n              allDates.forEach((entry, idx) => {\n                const { plate, date } = entry;\n                if (plate !== prevPlate) {\n                  if (prevPlate !== null) {\n                    periods.push({ plate: prevPlate, from: formatDate(periodStart), to: formatDate(periodEnd), revenueDate: periodStartRevenueDate });\n                  }\n                  periodStart = date;\n                  periodStartRevenueDate = entry.date instanceof Date ? entry.date.toISOString() : entry.date;\n                }\n                periodEnd = date;\n                prevPlate = plate;\n                if (idx === allDates.length - 1) {\n                  periods.push({ plate, from: formatDate(periodStart), to: formatDate(periodEnd), revenueDate: periodStartRevenueDate });\n                }\n              });\n\n              const carsArr = periods.map(p => {\n                let details = (periodDetailsMap[p.plate] && periodDetailsMap[p.plate][p.from]) || {};\n                if (!details.pickupOdometer) {\n                  const allDetails = periodDetailsMap[p.plate];\n                  if (allDetails) {\n                    const firstKey = Object.keys(allDetails)[0];\n                    details = allDetails[firstKey];\n                  }\n                }\n                return `${p.plate} | ${details.model || '-'} | ${details.category || '-'} | ${details.year || '-'} | Pickup Odometer: ${details.pickupOdometer || '-'} (${p.from} - ${p.to})`;\n              });\n              const uniquePlates = Array.from(new Set(periods.map(p => p.plate)));\n              \n              const contractData = {\n                contract: contractNo,\n                cars: carsArr,\n                carsCount: uniquePlates.length,\n                ...contractInfo[contractNo]\n              };\n\n              allContractsResultRows.push(contractData);\n              if (uniquePlates.length > 1) {\n                multiCarResultRows.push(contractData);\n              }\n            });\n\n            const stats = {\n                totalRows,\n                uniqueContracts: uniqueContractsCount,\n                multiCarContracts: multiCarResultRows.length\n            };\n\n            allContractsData = allContractsResultRows; // Store for future searches\n            multiCarData = multiCarResultRows; // Store for future searches\n\n            postMessage({ type: 'FILE_PROCESSED', payload: { allContractsResultRows, multiCarResultRows, stats } });\n\n        } catch (error) {\n            console.error('Worker error:', error);\n            postMessage({ type: 'ERROR', payload: error.message });\n        }\n    } else if (type === 'INITIALIZE_DATA') {\n        // This message type is to initialize the worker's internal data from the main thread\n        // This is useful if the data is processed elsewhere and then passed to the worker for search.\n        allContractsData = payload.allUniqueContracts;\n        multiCarData = payload.results; // Assuming 'results' corresponds to multiCarData\n        // Optionally, send back a confirmation or initial search results\n        postMessage({ type: 'SEARCH_RESULTS', payload: multiCarData }); // Send initial display data\n    } else if (type === 'SEARCH_DATA') {\n        const { searchTerm } = payload;\n        // Decide which data to search based on the current context.\n        // If the search term is empty, we display `multiCarData` (which corresponds to `results` prop).\n        // If there's a search term, we search `allContractsData` (which corresponds to `allUniqueContracts` prop).\n        const sourceData = searchTerm.trim() ? allContractsData : multiCarData;\n        \n        if (!searchTerm.trim()) {\n            postMessage({ type: 'SEARCH_RESULTS', payload: sourceData });\n            return;\n        }\n\n        const s = searchTerm.trim().toLowerCase();\n        const sNorm = normalize(s);\n\n        const filteredResults = sourceData.filter(row => {\n            if (row.contract && (row.contract.toLowerCase().includes(s) || normalize(row.contract).includes(sNorm))) return true;\n            if (row.cars && row.cars.some(c => c.toLowerCase().includes(s) || normalize(c).includes(sNorm))) return true;\n            if (row.carsCount && row.carsCount.toString() === s) return true;\n            if (row['Customer Name'] && (row['Customer Name'].toLowerCase().includes(s) || normalize(row['Customer Name']).includes(sNorm))) return true;\n            return false;\n        });\n        postMessage({ type: 'SEARCH_RESULTS', payload: filteredResults });\n    }\n};"],"names":["_typeof","o","Symbol","iterator","constructor","prototype","toPropertyKey","t","i","r","e","toPrimitive","call","TypeError","String","Number","_defineProperty","Object","defineProperty","value","enumerable","configurable","writable","ownKeys","keys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","push","apply","importScripts","allContractsData","multiCarData","normalize","str","toString","replace","toLowerCase","onmessage","console","log","type","payload","data","fileData","dataArr","Uint8Array","sheetName","XLSX","read","SheetNames","worksheet","Sheets","jsonData","utils","sheet_to_json","cellDates","totalRows","length","uniqueContractsCount","Set","map","row","Boolean","size","contractGroups","contractInfo","periodDetailsMap","normalizePlate","toUpperCase","forEach","contractNo","plateNumberRaw","plateNumber","revenueDate","pickupOdometer","dateKey","d","Date","isNaN","day","getDate","padStart","month","getMonth","year","getFullYear","concat","utc_days","Math","floor","date_info","ms","round","setTime","getTime","test","parsed","getDateStr","model","category","allContractsResultRows","multiCarResultRows","entries","_ref","carsObj","allDates","formatDate","y","m","rest","split","dd","_ref2","plate","arr","dateObj","serial","excelDateToJS","date","sort","a","b","periods","prevPlate","periodStart","periodEnd","periodStartRevenueDate","entry","idx","from","to","toISOString","carsArr","p","details","allDetails","uniquePlates","Array","contractData","arguments","getOwnPropertyDescriptors","defineProperties","_objectSpread","contract","cars","carsCount","stats","uniqueContracts","multiCarContracts","postMessage","error","message","allUniqueContracts","results","searchTerm","sourceData","trim","s","sNorm","filteredResults","includes","some","c"],"sourceRoot":""}