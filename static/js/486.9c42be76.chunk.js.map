{"version":3,"file":"static/js/486.9c42be76.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/helpers/esm/typeof.js","../node_modules/@babel/runtime/helpers/esm/toPropertyKey.js","../node_modules/@babel/runtime/helpers/esm/toPrimitive.js","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js","workers/contractProcessor.js"],"sourcesContent":["function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\nexport { _typeof as default };","import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nfunction toPropertyKey(t) {\n  var i = toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nexport { toPropertyKey as default };","import _typeof from \"./typeof.js\";\nfunction toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nexport { toPrimitive as default };","import toPropertyKey from \"./toPropertyKey.js\";\nfunction _defineProperty(e, r, t) {\n  return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nexport { _defineProperty as default };","import defineProperty from \"./defineProperty.js\";\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread2(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nexport { _objectSpread2 as default };","/* eslint-env worker */\n/* globals XLSX, FlexSearch */\n\nimportScripts('https://cdn.sheetjs.com/xlsx-latest/package/dist/xlsx.full.min.js');\nimportScripts('https://unpkg.com/flexsearch@0.7.31/dist/flexsearch.compact.js');\n\nlet allContractsData = []; // Store processed data\nlet multiCarData = []; // Store processed multi-car data\nlet searchIndex = new FlexSearch.Document({\n    tokenize: \"forward\",\n    document: {\n        id: \"contract\",\n        index: [\"contract\", \"Customer Name\", \"cars\"]\n    }\n});\n\n\nconst normalize = str => (str || '').toString().replace(/\\s+/g, '').toLowerCase();\n\nonmessage = function(e) {\n    console.log('Worker: Message received from main script');\n    const { type, payload } = e.data;\n\n    if (type === 'PROCESS_FILE') {\n        const fileData = payload;\n        try {\n            const dataArr = new Uint8Array(fileData);\n            const workbook = XLSX.read(dataArr, { type: 'array' });\n            const sheetName = workbook.SheetNames[0];\n            const worksheet = workbook.Sheets[sheetName];\n\n            // Clear previous index data\n            searchIndex = new FlexSearch.Document({\n                tokenize: \"forward\",\n                document: {\n                    id: \"contract\",\n                    index: [\"contract\", \"Customer Name\", \"cars\"]\n                }\n            });\n\n            const contractGroups = {};\n            const contractInfo = {};\n            const periodDetailsMap = {};\n            const normalizePlate = (str) => (str || '').toString().replace(/\\s+/g, '').toUpperCase();\n\n            const range = XLSX.utils.decode_range(worksheet['!ref']);\n            let totalRows = 0;\n            const contractNumbers = new Set();\n\n            // Iterate row by row\n            for (let R = range.s.r + 1; R <= range.e.r; ++R) { // +1 to skip header row\n                totalRows++;\n                const row = {};\n                // Extract cell values by column header (assuming header is in row 1)\n                const getCellValue = (colChar) => {\n                    const cellAddress = colChar + R;\n                    const cell = worksheet[cellAddress];\n                    return cell ? (cell.t === 'n' ? cell.v : XLSX.utils.format_cell(cell)) : undefined;\n                };\n\n                const contractNo = getCellValue('A'); // Assuming Contract No. is in column A\n                const plateNumberRaw = getCellValue('B'); // Assuming Plate Number is in column B\n                const revenueDate = getCellValue('C'); // Assuming Revenue Date is in column C\n                const pickupOdometer = getCellValue('D'); // Assuming Pickup Odometer is in column D\n                const carModel = getCellValue('E'); // Assuming Car Model is in column E\n                const carCategory = getCellValue('F'); // Assuming Car Category is in column F\n                const manufactureYear = getCellValue('G'); // Assuming Manufacture Year is in column G\n                const customerName = getCellValue('H'); // Assuming Customer Name is in column H\n                const customerPhone = getCellValue('I'); // Assuming Customer Phone is in column I\n                const pickupDate = getCellValue('J'); // Assuming Pick-up Date is in column J\n                const dropoffDate = getCellValue('K'); // Assuming Drop-off Date is in column K\n\n                if (!contractNo || !plateNumberRaw || !revenueDate) continue;\n\n                contractNumbers.add(contractNo);\n                const plateNumber = normalizePlate(plateNumberRaw);\n\n                if (!contractGroups[contractNo]) contractGroups[contractNo] = {};\n                if (!contractGroups[contractNo][plateNumber]) contractGroups[contractNo][plateNumber] = [];\n                contractGroups[contractNo][plateNumber].push(revenueDate);\n\n                if (!contractInfo[contractNo]) {\n                    contractInfo[contractNo] = {\n                        'Pick-up Date': pickupDate || '',\n                        'Drop-off Date': dropoffDate || '',\n                        'Plate Number': plateNumberRaw || '',\n                        'Car Model': carModel || '',\n                        'Car Category': carCategory || '',\n                        'Manufacture Year': manufactureYear || '',\n                        'Customer Name': customerName || '',\n                        'Customer Phone': customerPhone || ''\n                    };\n                }\n\n                const getDateStr = (d) => {\n                    if (d instanceof Date && !isNaN(d)) {\n                        const day = String(d.getDate()).padStart(2, '0');\n                        const month = String(d.getMonth() + 1).padStart(2, '0');\n                        const year = d.getFullYear();\n                        return `${day}/${month}/${year}`;\n                    }\n                    if (typeof d === 'number') {\n                        const utc_days = Math.floor(d - 25569);\n                        const utc_value = utc_days * 86400;\n                        const date_info = new Date(utc_value * 1000);\n                        const ms = Math.round((d - Math.floor(d)) * 86400 * 1000);\n                        date_info.setTime(date_info.getTime() + ms);\n                        const day = String(date_info.getDate()).padStart(2, '0');\n                        const month = String(date_info.getMonth() + 1).padStart(2, '0');\n                        const year = date_info.getFullYear();\n                        return `${day}/${month}/${year}`;\n                    }\n                    if (typeof d === 'string' && /^\\d{4}-\\d{2}-\\d{2}/.test(d)) {\n                        const parsed = new Date(d);\n                        if (!isNaN(parsed)) {\n                            const day = String(parsed.getDate()).padStart(2, '0');\n                            const month = String(parsed.getMonth() + 1).padStart(2, '0');\n                            const year = parsed.getFullYear();\n                            return `${day}/${month}/${year}`;\n                        }\n                    }\n                    return d;\n                };\n                const dateKey = getDateStr(revenueDate);\n                if (!periodDetailsMap[plateNumber]) periodDetailsMap[plateNumber] = {};\n                periodDetailsMap[plateNumber][dateKey] = {\n                    model: carModel || '',\n                    category: carCategory || '',\n                    year: manufactureYear || '',\n                    pickupOdometer\n                };\n            }\n\n            const allContractsResultRows = [];\n            const multiCarResultRows = [];\n\n            Object.entries(contractGroups).forEach(([contractNo, carsObj]) => {\n                let allDates = [];\n                const excelDateToJS = (serial) => {\n                    const utc_days = Math.floor(serial - 25569);\n                    const utc_value = utc_days * 86400;\n                    const date_info = new Date(utc_value * 1000);\n                    const ms = Math.round((serial - Math.floor(serial)) * 86400 * 1000);\n                    date_info.setTime(date_info.getTime() + ms);\n                    return date_info;\n                };\n                const formatDate = d => {\n                    if (d instanceof Date && !isNaN(d)) {\n                        const day = String(d.getDate()).padStart(2, '0');\n                        const month = String(d.getMonth() + 1).padStart(2, '0');\n                        const year = d.getFullYear();\n                        return `${day}/${month}/${year}`;\n                    }\n                    if (typeof d === 'string' && /^\\d{4}-\\d{2}-\\d{2}/.test(d)) {\n                        const [y, m, rest] = d.split('-');\n                        const [dd] = rest.split('T')[0].split(' ');\n                        return `${dd}/${m}/${y}`;\n                    }\n                    return d;\n                };\n                Object.entries(carsObj).forEach(([plate, arr]) => {\n                    arr.forEach(d => {\n                        let dateObj = d;\n                        if (typeof d === 'number') dateObj = excelDateToJS(d);\n                        else if (typeof d === 'string') {\n                            const parsed = new Date(d);\n                            if (!isNaN(parsed)) dateObj = parsed;\n                        }\n                        allDates.push({ plate, date: dateObj });\n                    });\n                });\n                allDates.sort((a, b) => new Date(a.date) - new Date(b.date));\n                let periods = [];\n                let prevPlate = null, periodStart = null, periodEnd = null, periodStartRevenueDate = null;\n                allDates.forEach((entry, idx) => {\n                    const { plate, date } = entry;\n                    if (plate !== prevPlate) {\n                        if (prevPlate !== null) {\n                            periods.push({ plate: prevPlate, from: formatDate(periodStart), to: formatDate(periodEnd), revenueDate: periodStartRevenueDate });\n                        }\n                        periodStart = date;\n                        periodStartRevenueDate = entry.date instanceof Date ? entry.date.toISOString() : entry.date;\n                    }\n                    periodEnd = date;\n                    prevPlate = plate;\n                    if (idx === allDates.length - 1) {\n                        periods.push({ plate, from: formatDate(periodStart), to: formatDate(periodEnd), revenueDate: periodStartRevenueDate });\n                    }\n                });\n\n                const carsArr = periods.map(p => {\n                    let details = (periodDetailsMap[p.plate] && periodDetailsMap[p.plate][p.from]) || {};\n                    if (!details.pickupOdometer) {\n                        const allDetails = periodDetailsMap[p.plate];\n                        if (allDetails) {\n                            const firstKey = Object.keys(allDetails)[0];\n                            details = allDetails[firstKey];\n                        }\n                    }\n                    return `${p.plate} | ${details.model || '-'} | ${details.category || '-'} | ${details.year || '-'} | Pickup Odometer: ${details.pickupOdometer || '-'} (${p.from} - ${p.to})`;\n                });\n                const uniquePlates = Array.from(new Set(periods.map(p => p.plate)));\n\n                const contractData = {\n                    contract: contractNo,\n                    cars: carsArr,\n                    carsCount: uniquePlates.length,\n                    ...contractInfo[contractNo]\n                };\n\n                allContractsResultRows.push(contractData);\n                searchIndex.add(contractData); // Add to FlexSearch index\n\n                if (uniquePlates.length > 1) {\n                    multiCarResultRows.push(contractData);\n                }\n            });\n\n            const stats = {\n                totalRows,\n                uniqueContracts: contractNumbers.size,\n                multiCarContracts: multiCarResultRows.length\n            };\n\n            allContractsData = allContractsResultRows; // Store for future searches (if needed, consider removing if FlexSearch is primary)\n            multiCarData = multiCarResultRows; // Store for future searches (if needed, consider removing if FlexSearch is primary)\n\n            postMessage({ type: 'FILE_PROCESSED', payload: { allContractsResultRows, multiCarResultRows, stats } });\n\n        } catch (error) {\n            console.error('Worker error:', error);\n            postMessage({ type: 'ERROR', payload: error.message });\n        }\n    } else if (type === 'INITIALIZE_DATA') {\n        // This message type is to initialize the worker's internal data from the main thread\n        // This is useful if the data is processed elsewhere and then passed to the worker for search.\n        allContractsData = payload.allUniqueContracts;\n        multiCarData = payload.results; // Assuming 'results' corresponds to multiCarData\n        // Optionally, send back a confirmation or initial search results\n        postMessage({ type: 'SEARCH_RESULTS', payload: multiCarData }); // Send initial display data\n    } else if (type === 'SEARCH_DATA') {\n        const { searchTerm } = payload;\n\n        if (!searchTerm.trim()) {\n            // If search term is empty, display multiCarData (which corresponds to results prop)\n            postMessage({ type: 'SEARCH_RESULTS', payload: multiCarData });\n            return;\n        }\n\n        const s = searchTerm.trim();\n\n        // Perform search using FlexSearch index\n        const searchResults = searchIndex.search(s, {\n            enrich: true // Return the full document, not just the ID\n        });\n\n        // FlexSearch returns results grouped by index field. Flatten and get unique documents.\n        const uniqueResultsMap = new Map();\n        searchResults.forEach(fieldResult => {\n            fieldResult.result.forEach(item => {\n                uniqueResultsMap.set(item.doc.contract, item.doc); // Use contract as unique key\n            });\n        });\n\n        const filteredResults = Array.from(uniqueResultsMap.values());\n\n        postMessage({ type: 'SEARCH_RESULTS', payload: filteredResults });\n    }\n};"],"names":["_typeof","o","Symbol","iterator","constructor","prototype","toPropertyKey","t","i","r","e","toPrimitive","call","TypeError","String","Number","_defineProperty","Object","defineProperty","value","enumerable","configurable","writable","ownKeys","keys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","push","apply","importScripts","allContractsData","multiCarData","searchIndex","FlexSearch","Document","tokenize","document","id","index","onmessage","console","log","type","payload","data","fileData","dataArr","Uint8Array","workbook","XLSX","read","sheetName","SheetNames","worksheet","Sheets","contractGroups","contractInfo","periodDetailsMap","normalizePlate","str","toString","replace","toUpperCase","range","utils","decode_range","totalRows","contractNumbers","Set","R","s","getCellValue","colChar","cell","v","format_cell","undefined","contractNo","plateNumberRaw","revenueDate","pickupOdometer","carModel","carCategory","manufactureYear","customerName","customerPhone","pickupDate","dropoffDate","add","plateNumber","dateKey","d","Date","isNaN","day","getDate","padStart","month","getMonth","year","getFullYear","concat","utc_days","Math","floor","date_info","ms","round","setTime","getTime","test","parsed","getDateStr","model","category","allContractsResultRows","multiCarResultRows","entries","forEach","_ref","carsObj","allDates","formatDate","y","m","rest","split","dd","_ref2","plate","arr","dateObj","serial","excelDateToJS","date","sort","a","b","periods","prevPlate","periodStart","periodEnd","periodStartRevenueDate","entry","idx","from","to","toISOString","length","carsArr","map","p","details","allDetails","uniquePlates","Array","contractData","arguments","getOwnPropertyDescriptors","defineProperties","_objectSpread","contract","cars","carsCount","stats","uniqueContracts","size","multiCarContracts","postMessage","error","message","allUniqueContracts","results","searchTerm","trim","searchResults","search","enrich","uniqueResultsMap","Map","fieldResult","result","item","set","doc","filteredResults","values"],"sourceRoot":""}