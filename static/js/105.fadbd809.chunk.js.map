{"version":3,"file":"static/js/105.fadbd809.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/helpers/esm/typeof.js","../node_modules/@babel/runtime/helpers/esm/toPropertyKey.js","../node_modules/@babel/runtime/helpers/esm/toPrimitive.js","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js","workers/contractProcessor.js"],"sourcesContent":["function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\nexport { _typeof as default };","import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nfunction toPropertyKey(t) {\n  var i = toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nexport { toPropertyKey as default };","import _typeof from \"./typeof.js\";\nfunction toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nexport { toPrimitive as default };","import toPropertyKey from \"./toPropertyKey.js\";\nfunction _defineProperty(e, r, t) {\n  return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nexport { _defineProperty as default };","import defineProperty from \"./defineProperty.js\";\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread2(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nexport { _objectSpread2 as default };","/* eslint-env worker */\n/* globals XLSX */\n\nimportScripts('https://cdn.sheetjs.com/xlsx-latest/package/dist/xlsx.full.min.js');\nconsole.log('Worker: xlsx.full.min.js loaded');\n\nlet allContractsData = []; // Store processed data\nlet multiCarData = []; // Store processed multi-car data\n\nconst excelDateToJS = (serial) => {\n  const utc_days = Math.floor(serial - 25569);\n  const utc_value = utc_days * 86400;\n  const date_info = new Date(utc_value * 1000);\n  const ms = Math.round((serial - Math.floor(serial)) * 86400 * 1000);\n  date_info.setTime(date_info.getTime() + ms);\n  return date_info;\n};\n\nconst formatDate = d => {\n  if (d instanceof Date && !isNaN(d)) {\n    const day = String(d.getDate()).padStart(2, '0');\n    const month = String(d.getMonth() + 1).padStart(2, '0');\n    const year = d.getFullYear();\n    return `${day}/${month}/${year}`;\n  }\n  if (typeof d === 'string' && /^\\d{4}-\\d{2}-\\d{2}/.test(d)) {\n    const [y, m, rest] = d.split('-');\n    const [dd] = rest.split('T')[0].split(' ');\n    return `${dd}/${m}/${y}`;\n  }\n  return d;\n};\n\nconst normalize = str => (str || '').toString().replace(/\\s+/g, '').toLowerCase();\n\nonmessage = function(e) {\n    console.log('Worker: Message received from main script');\n    const { type, payload } = e.data;\n\n    if (type === 'PROCESS_FILE') {\n        const fileData = payload;\n        try {\n            console.log('Worker: Starting XLSX.read');\n            console.log('Worker: Attempting to create Uint8Array');\n            const dataArr = new Uint8Array(fileData);\n            const workbook = XLSX.read(dataArr, { type: 'array' });\n            console.log('Worker: Finished XLSX.read, starting sheet_to_json');\n            const sheetName = workbook.SheetNames[0];\n            console.log('Worker: Sheet Name:', sheetName);\n            const worksheet = workbook.Sheets[sheetName];\n            console.log('Worker: Worksheet is undefined?', worksheet === undefined);\n            const jsonData = XLSX.utils.sheet_to_json(worksheet, { cellDates: true });\n            console.log('Worker: Finished sheet_to_json, starting jsonData.forEach');\n\n            const totalRows = jsonData.length;\n            const contractNumbers = new Set(jsonData.map(row => row['Contract No.']).filter(Boolean));\n            const uniqueContractsCount = contractNumbers.size;\n\n            const contractGroups = {};\n            const contractInfo = {};\n            const periodDetailsMap = {};\n            const normalizePlate = (str) => (str || '').toString().replace(/\\s+/g, '').toUpperCase();\n            \n            jsonData.forEach(row => {\n              const contractNo = row['Contract No.'];\n              const plateNumberRaw = row['Plate Number'];\n              const plateNumber = normalizePlate(plateNumberRaw);\n              const revenueDate = row['Revenue Date'];\n              const pickupOdometer = row['Pickup Odometer'] || '';\n              if (!contractNo || !plateNumber || !revenueDate) return;\n              if (!contractGroups[contractNo]) contractGroups[contractNo] = {};\n              if (!contractGroups[contractNo][plateNumber]) contractGroups[contractNo][plateNumber] = [];\n              contractGroups[contractNo][plateNumber].push(revenueDate);\n              if (!contractInfo[contractNo]) {\n                contractInfo[contractNo] = {\n                  'Pick-up Date': row['Pick-up Date'] || '',\n                  'Drop-off Date': row['Drop-off Date'] || '',\n                  'Plate Number': plateNumberRaw || '',\n                  'Car Model': row['Car Model'] || '',\n                  'Car Category': row['Car Category'] || '',\n                  'Manufacture Year': row['Manufacture Year'] || '',\n                  'Customer Name': row['Customer Name'] || '',\n                  'Customer Phone': row['Customer Phone'] || ''\n                };\n              }\n              const getDateStr = (d) => {\n                let dateObj = d;\n                if (typeof d === 'number') {\n                  // Assuming Excel serial date\n                  const utc_days = Math.floor(d - 25569);\n                  const utc_value = utc_days * 86400;\n                  dateObj = new Date(utc_value * 1000);\n                  const ms = Math.round((d - Math.floor(d)) * 86400 * 1000);\n                  dateObj.setTime(dateObj.getTime() + ms);\n                } else if (typeof d === 'string') {\n                  // Try to parse string dates\n                  const parsed = new Date(d);\n                  if (!isNaN(parsed)) {\n                    dateObj = parsed;\n                  } else {\n                    return d; // Return original string if not a valid date string\n                  }\n                }\n\n                if (dateObj instanceof Date && !isNaN(dateObj)) {\n                  const day = String(dateObj.getDate()).padStart(2, '0');\n                  const month = String(dateObj.getMonth() + 1).padStart(2, '0');\n                  const year = String(dateObj.getFullYear());\n                  return `${day}/${month}/${year}`;\n                }\n                return d; // Fallback if not a recognized date type\n              };\n              const dateKey = getDateStr(revenueDate);\n              if (!periodDetailsMap[plateNumber]) periodDetailsMap[plateNumber] = {};\n              periodDetailsMap[plateNumber][dateKey] = {\n                model: row['Car Model'] || '',\n                category: row['Car Category'] || '',\n                year: row['Manufacture Year'] || '',\n                pickupOdometer\n              };\n            });\n            console.log('Worker: Finished jsonData.forEach, starting contractGroups processing');\n\n            const allContractsResultRows = [];\n            const multiCarResultRows = [];\n\n            \n\n            Object.entries(contractGroups).forEach(([contractNo, carsObj]) => {\n              let allDates = [];\n              Object.entries(carsObj).forEach(([plate, arr]) => {\n                arr.forEach(d => {\n                  let dateObj = d;\n                  if (typeof d === 'number') dateObj = excelDateToJS(d);\n                  else if (typeof d === 'string') {\n                    const parsed = new Date(d);\n                    if (!isNaN(parsed)) dateObj = parsed;\n                  }\n                  allDates.push({ plate, date: dateObj });\n                });\n              });\n              allDates.sort((a, b) => a.date - b.date);\n              let periods = [];\n              let prevPlate = null, periodStart = null, periodEnd = null, periodStartRevenueDate = null;\n              allDates.forEach((entry, idx) => {\n                const { plate, date } = entry;\n                if (plate !== prevPlate) {\n                  if (prevPlate !== null) {\n                    periods.push({ plate: prevPlate, from: formatDate(periodStart), to: formatDate(periodEnd), revenueDate: periodStartRevenueDate });\n                  }\n                  periodStart = date;\n                  periodStartRevenueDate = entry.date instanceof Date ? entry.date.toISOString() : entry.date;\n                }\n                periodEnd = date;\n                prevPlate = plate;\n                if (idx === allDates.length - 1) {\n                  periods.push({ plate, from: formatDate(periodStart), to: formatDate(periodEnd), revenueDate: periodStartRevenueDate });\n                }\n              });\n\n              const carsArr = periods.map(p => {\n                let details = (periodDetailsMap[p.plate] && periodDetailsMap[p.plate][p.from]) || {};\n                if (!details.pickupOdometer) {\n                  const allDetails = periodDetailsMap[p.plate];\n                  if (allDetails) {\n                    const firstKey = Object.keys(allDetails)[0];\n                    details = allDetails[firstKey];\n                  }\n                }\n                return `${p.plate} | ${details.model || '-'} | ${details.category || '-'} | ${details.year || '-'} | Pickup Odometer: ${details.pickupOdometer || '-'} (${p.from} - ${p.to})`;\n              });\n              const uniquePlates = Array.from(new Set(periods.map(p => p.plate)));\n              \n              const contractData = {\n                contract: contractNo,\n                cars: carsArr,\n                carsCount: uniquePlates.length,\n                ...contractInfo[contractNo]\n              };\n\n              allContractsResultRows.push(contractData);\n              if (uniquePlates.length > 1) {\n                multiCarResultRows.push(contractData);\n              }\n            });\n            console.log('Worker: Finished contractGroups processing, sending results');\n\n            const stats = {\n                totalRows,\n                uniqueContracts: uniqueContractsCount,\n                multiCarContracts: multiCarResultRows.length\n            };\n\n            allContractsData = allContractsResultRows; // Store for future searches\n            multiCarData = multiCarResultRows; // Store for future searches\n\n            console.log('Worker: Sending FILE_PROCESSED message');\n            postMessage({ type: 'FILE_PROCESSED', payload: { allContractsResultRows, multiCarResultRows, stats } });\n\n        } catch (error) {\n            console.error('Worker error:', error);\n            postMessage({ type: 'ERROR', payload: error.message });\n        }\n    } else if (type === 'INITIALIZE_DATA') {\n        // This message type is to initialize the worker's internal data from the main thread\n        // This is useful if the data is processed elsewhere and then passed to the worker for search.\n        allContractsData = payload.allUniqueContracts;\n        multiCarData = payload.results; // Assuming 'results' corresponds to multiCarData\n        // Optionally, send back a confirmation or initial search results\n        postMessage({ type: 'SEARCH_RESULTS', payload: multiCarData }); // Send initial display data\n    } else if (type === 'SEARCH_DATA') {\n        const { searchTerm } = payload;\n        // Decide which data to search based on the current context.\n        // If the search term is empty, we display `multiCarData` (which corresponds to `results` prop).\n        // If there's a search term, we search `allContractsData` (which corresponds to `allUniqueContracts` prop).\n        const sourceData = searchTerm.trim() ? allContractsData : multiCarData;\n        \n        if (!searchTerm.trim()) {\n            postMessage({ type: 'SEARCH_RESULTS', payload: sourceData });\n            return;\n        }\n\n        const s = searchTerm.trim().toLowerCase();\n        const sNorm = normalize(s);\n\n        const filteredResults = sourceData.filter(row => {\n            if (row.contract && (row.contract.toLowerCase().includes(s) || normalize(row.contract).includes(sNorm))) return true;\n            if (row.cars && row.cars.some(c => c.toLowerCase().includes(s) || normalize(c).includes(sNorm))) return true;\n            if (row.carsCount && row.carsCount.toString() === s) return true;\n            if (row['Customer Name'] && (row['Customer Name'].toLowerCase().includes(s) || normalize(row['Customer Name']).includes(sNorm))) return true;\n            return false;\n        });\n        postMessage({ type: 'SEARCH_RESULTS', payload: filteredResults });\n    }\n};"],"names":["_typeof","o","Symbol","iterator","constructor","prototype","toPropertyKey","t","i","r","e","toPrimitive","call","TypeError","String","Number","_defineProperty","Object","defineProperty","value","enumerable","configurable","writable","ownKeys","keys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","push","apply","importScripts","console","log","allContractsData","multiCarData","formatDate","d","Date","isNaN","day","getDate","padStart","month","getMonth","year","getFullYear","concat","test","y","m","rest","split","dd","normalize","str","toString","replace","toLowerCase","onmessage","type","payload","data","fileData","dataArr","Uint8Array","workbook","XLSX","read","sheetName","SheetNames","worksheet","Sheets","undefined","jsonData","utils","sheet_to_json","cellDates","totalRows","length","uniqueContractsCount","Set","map","row","Boolean","size","contractGroups","contractInfo","periodDetailsMap","normalizePlate","toUpperCase","forEach","contractNo","plateNumberRaw","plateNumber","revenueDate","pickupOdometer","dateKey","dateObj","utc_days","Math","floor","ms","round","setTime","getTime","parsed","getDateStr","model","category","allContractsResultRows","multiCarResultRows","entries","_ref","carsObj","allDates","_ref2","plate","arr","serial","date_info","excelDateToJS","date","sort","a","b","periods","prevPlate","periodStart","periodEnd","periodStartRevenueDate","entry","idx","from","to","toISOString","carsArr","p","details","allDetails","uniquePlates","Array","contractData","arguments","getOwnPropertyDescriptors","defineProperties","_objectSpread","contract","cars","carsCount","stats","uniqueContracts","multiCarContracts","postMessage","error","message","allUniqueContracts","results","searchTerm","sourceData","trim","s","sNorm","filteredResults","includes","some","c"],"sourceRoot":""}